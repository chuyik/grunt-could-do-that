[
  {
    "tags": [
      {
        "type": "example",
        "string": "  Msg.index(req, res);"
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "request",
        "description": "object",
        "optional": false
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[optional]",
        "description": "response object",
        "optional": true
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "express object"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Return list of msgs<br />This is just a <code>demo</code> for dox.</p><h4>Examples:</h4>\n<pre><code>// named john and at least 18\nMyModel.find({ name: &#39;john&#39;, age: { $gte: 18 }});\n</code></pre>",
      "summary": "<p>Return list of msgs<br />This is just a <code>demo</code> for dox.</p>",
      "body": "<h4>Examples:</h4>\n<pre><code>// named john and at least 18\nMyModel.find({ name: &#39;john&#39;, age: { $gte: 18 }});\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isEvent": false,
    "ignore": false,
    "line": 7,
    "codeStart": 22,
    "code": "// Get list of msgs\nexports.index = function(req, res) {\n  Msg.find(function (err, msgs) {\n    if(err) { return handleError(res, err); }\n    return res.json(200, msgs);\n  });\n};\n\n// Get a single msg\nexports.show = function(req, res) {\n  Msg.findById(req.params.id, function (err, msg) {\n    if(err) { return handleError(res, err); }\n    if(!msg) { return res.send(404); }\n    return res.json(msg);\n  });\n};\n\n// Creates a new msg in the DB.\nexports.create = function(req, res) {\n  var msg = _.merge(req.body, {\n    comments: [{\n      _someId : '5447004666446de09aee2853',\n      _someIds : '5447004666446de09aee2853'\n    }]\n  });\n  Msg.create(req.body, function(err, msg) {\n    if(err) { return handleError(res, err); }\n    Msg.find(function (err, msgs) {\n      // handle errors ..\n      var newMsg = msgs.splice(-1, 1)[0];\n      console.log('=====');\n      console.log(msgs);\n      console.log('-----');\n      console.log(newMsg);\n      console.log('=====');\n      var comment = newMsg.comments[0];\n      comment.body = 'updatedText';\n      newMsg.save(function(){\n        return res.json(201, msg);\n      });\n    });\n  });\n};\n\n// Updates an existing msg in the DB.\nexports.update = function(req, res) {\n  if(req.body._id) { delete req.body._id; }\n  Msg.findById(req.params.id, function (err, msg) {\n    if (err) { return handleError(res, err); }\n    if(!msg) { return res.send(404); }\n    var updated = _.merge(msg, req.body);\n    updated.save(function (err) {\n      if (err) { return handleError(res, err); }\n      return res.json(200, msg);\n    });\n  });\n};\n\n// Deletes a msg from the DB.\nexports.destroy = function(req, res) {\n  Msg.findById(req.params.id, function (err, msg) {\n    if(err) { return handleError(res, err); }\n    if(!msg) { return res.send(404); }\n    msg.remove(function(err) {\n      if(err) { return handleError(res, err); }\n      return res.send(204);\n    });\n  });\n};\n\nexports.review = function(req, res) {\n  var o = {};\n  o.map = function () { emit(this.name, 1) }\n  o.reduce = function (k, vals) { return vals.length }\n  o.out = { replace: 'createdCollectionNameForResults' }\n  o.verbose = true;\n\n  Msg.mapReduce(o, function (err, model, stats) {\n    console.log('map reduce took %d ms', stats.processtime);\n    model.find().exec(function (err, docs) {\n      console.log('docs: ', docs);\n      return res.json(200, docs);\n    });\n  })\n}\n\nexports.aggregate = function(req, res) {\n  Msg.aggregate(\n      { $group: { _id: '$name', maxBalance: { $max: '$name' }}}\n    , { $project: { _id: 0, maxBalance: 1 }}\n    , function (err, docs) {\n      if (err) return handleError(err);\n      console.log(docs); // [ { maxBalance: 98000 } ]\n      return res.json(200, docs);\n  });\n}\n\nfunction handleError(res, err) {\n  return res.send(500, err);\n}"
  }
]